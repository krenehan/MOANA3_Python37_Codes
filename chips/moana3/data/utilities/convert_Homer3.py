# -*- coding: utf-8 -*-
"""
Created on Thu Feb 15 10:13:58 2024

Convert a Homer3 output file to reconstruction_data.npz file format.

@author: Kevin Renehan
"""

import numpy as np
from scipy.io import loadmat
import os

# Unfortunately, Homer3 uses a Matlab class called ProcResultClass, which means that a standard call to loadmat won't really work out of the box
# Need to use Matlab script to spit out a plain mat file containing simple structs

def convert_Homer3(filepath, save_output = False):
# if True:
    # Resolve the full filepath
    filepath = os.path.abspath(filepath)    

    # # Uncomment for debug
    # filepath = os.path.abspath(r'C:\Users\Dell-User\Dropbox\MOANA\Python\MOANA3_Python37_Codes\chips\moana3\data\2023-12-04_Petros_Motor6s_MOANA_Pinhole\motor\forHomer3_motor_block_single_source_setting16_TD\derivatives\homer\cw_r1_out.mat')
    
    # Get the filepath and filename
    path, name = os.path.split(filepath)
    name = os.path.splitext(name)[0]
    
    # Dictionaries
    dod_idcs = {'680': 0, '850': 1}
    dc_idcs = {'HbO': 0, 'HbR': 1, 'HbT': 2}
    dc_avg_idcs = {'HRF HbO': 0, 'HRF HbR': 1, 'HRF HbT': 2}
    
    # Load the mat file
    mat_file = loadmat(filepath)
    
    # Time
    time = np.squeeze(mat_file['time'])
    dc_avg_time = np.squeeze(mat_file['dc_avg_time'])
    stim = mat_file['stim']
    
    # Create structure for DOD
    dod = np.zeros((16, 2, 16, len(mat_file['time'])))
    for ml in range(len(np.squeeze(mat_file['od_meas_list']))):
    
        # Grab the info
        si = int(mat_file['od_meas_list'][0][ml]['sourceIndex'])-1
        di = int(mat_file['od_meas_list'][0][ml]['detectorIndex'])-1
        wi = int(mat_file['od_meas_list'][0][ml]['wavelengthIndex'])-1
        # print("ML: s{}, w{}, d{}".format(si, wi, di))
        
        # Fill the data structure
        dod[si][wi][di] = np.transpose(mat_file['od_dts'])[ml]
        
    # Create structure for DC
    dc = np.zeros((16, 3, 16, len(mat_file['time'])))
    for ml in range(len(np.squeeze(mat_file['dc_meas_list']))):
    
        # Grab the info
        si = int(mat_file['dc_meas_list'][0][ml]['sourceIndex'])-1
        di = int(mat_file['dc_meas_list'][0][ml]['detectorIndex'])-1
        ci = mat_file['dc_meas_list'][0][ml]['dataTypeLabel']
        ci = dc_idcs[ci[0][0][0]]
        # print("ML: s{}, c{}, d{}".format(si, ci, di))
        
        # Fill the data structure
        dc[si][ci][di] = np.transpose(mat_file['dc_dts'])[ml]
        
    # Create structure for DC_AVG
    dc_avg = np.zeros((16, 3, 16, len(mat_file['dc_avg_dts'])))
    dc_avg_std = np.zeros_like(dc_avg)
    for ml in range(len(np.squeeze(mat_file['dc_avg_meas_list']))):
    
        # Grab the info
        si = int(mat_file['dc_avg_meas_list'][0][ml]['sourceIndex'])-1
        di = int(mat_file['dc_avg_meas_list'][0][ml]['detectorIndex'])-1
        ci = mat_file['dc_avg_meas_list'][0][ml]['dataTypeLabel']
        ci = dc_avg_idcs[ci[0][0][0]]
        # print("ML: s{}, c{}, d{}".format(si, ci, di))
        
        # Fill the data structure
        dc_avg[si][ci][di] = np.transpose(mat_file['dc_avg_dts'])[ml]
        dc_avg_std[si][ci][di] = np.transpose(mat_file['dc_avg_std'])[ml]
    
    # Return
    if save_output:
        np.savez_compressed(os.path.join(path, name), time=time, dod=dod, dc=dc, dc_avg_time=dc_avg_time, dc_avg=dc_avg, dc_avg_std=dc_avg_std, dc_idcs=dc_idcs, dod_idcs=dod_idcs, dc_avg_idcs=dc_avg_idcs)
        return 0
    else:
        return time, stim, dod, dod_idcs, dc, dc_idcs, dc_avg_time, dc_avg, dc_avg_idcs, dc_avg_std
    

if __name__ in '__main__':
    
    import easygui
    
    # Save output
    save_output=True
    
    # Select a data directory
    target_file = easygui.fileopenbox(title="Choose .mat file generated by Homer3")
    
    # Check
    if target_file == None:
        raise Exception("Target file not provided")
    
    # Run function
    convert_Homer3(target_file, save_output=save_output)

